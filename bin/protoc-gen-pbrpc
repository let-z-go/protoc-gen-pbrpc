#!/usr/bin/env python


import os
import re
import subprocess
import sys

from google.protobuf.compiler import plugin_pb2


VOID_PATH = ".pbrpc.Void"
NO_RETURN_PATH = ".pbrpc.NoReturn"

file_path_2_package_path = {}
message_path_2_message_name_offset = {}
message_path_2_package_path = {}
package_name_counts = {}
package_path_2_package_alias = {}
package_importations = []
response = plugin_pb2.CodeGeneratorResponse()


def generate_stubs(request):
    global response

    for fd in request.proto_file:
        preprocess_file(fd)

    for fd in request.proto_file:
        process_file(fd)

    file_path_2_package_path.clear()
    message_path_2_message_name_offset.clear()
    message_path_2_package_path.clear()
    response = response
    response = plugin_pb2.CodeGeneratorResponse()
    return response


def preprocess_file(fd):
    file_path = fd.name

    if fd.options.go_package == "":
        raise SystemExit("{}: `go_package` option required".format(file_path))

    package_path = re.sub(r"//+", "/", "/" + fd.options.go_package + "/")[1:-1]

    if package_path == "":
        raise SystemExit("{}: invalid `go_package` option: {!r}".format(file_path, fd.options.go_package))

    file_path_2_package_path[file_path] = package_path
    message_path_prefix = "."

    if fd.package != "":
        message_path_prefix += fd.package + "."

    message_name_offset = len(message_path_prefix)

    for d in fd.message_type:
        preprocess_message(d, message_path_prefix, message_name_offset, package_path)


def preprocess_message(d, message_path_prefix, message_name_offset, package_path):
    message_path = message_path_prefix + d.name
    message_path_2_message_name_offset[message_path] = message_name_offset
    message_path_2_package_path[message_path] = package_path
    message_path_prefix = message_path + "."

    for nested_d in d.nested_type:
        preprocess_message(nested_d, message_path_prefix, message_name_offset, package_path)


def get_package_path_by_file_path(file_path):
    return file_path_2_package_path[file_path]


def get_message_name(message_path):
    return message_path[message_path_2_message_name_offset[message_path]:].replace(".", "_")


def get_package_path_by_message_path(message_path):
    return message_path_2_package_path[message_path]


def process_file(fd):
    import_package("pbrpc", "github.com/let-z-go/pbrpc")

    for sd in fd.service:
        preprocess_service(sd)

    generate_stub(fd)
    package_name_counts.clear()
    package_path_2_package_alias.clear()
    package_importations[:] = ()


def import_package(package_alias, package_path):
    package_path_2_package_alias[package_path] = package_alias
    package_importations.append((package_alias, package_path))


def preprocess_service(sd):
    for md in sd.method:
        preprocess_method(md)


def preprocess_method(md):
    for message_path in (md.input_type, md.output_type):
        package_path = get_package_path_by_message_path(message_path)

        if package_path in package_path_2_package_alias.keys():
            continue

        package_name = get_package_name(package_path)
        package_name_count = package_name_counts.get(package_name, 0)
        package_name_counts[package_name] = package_name_count + 1

        if package_name_count == 0:
            package_alias = package_name
        else:
            package_alias = package_name + str(package_name_count)

        package_path_2_package_alias[package_path] = package_alias
        import_package(package_alias, package_path)


def get_struct_path(current_package_path, message_path):
    package_path = get_package_path_by_message_path(message_path)
    message_name = get_message_name(message_path)

    if package_path == current_package_path:
        struct_path = message_name
    else:
        package_alias = package_path_2_package_alias[package_path]
        struct_path = package_alias + "." + message_name

    return struct_path


def make_import_decl(current_package_path):
    import_decl = """\

import (
    "context"
    "reflect"

"""

    for package_alias, package_path in sorted(package_importations, key=lambda x: x[1]):
        if package_path == current_package_path:
            continue

        import_decl += "    {} \"{}\"\n".format(package_alias, package_path)

    import_decl += ")\n"
    return import_decl


def make_const_decl(package_path, sd):
    service_name = sd.name
    service_name_const_name = get_service_name_const_name(service_name)
    service_name_const_value = remove_postfix(service_name, "Service")

    const_decl = """\

const (
    {service_name_const_name} = "{service_name_const_value}"

""".format(
        service_name_const_name=service_name_const_name,
        service_name_const_value=service_name_const_value,
    )

    for method_index, md in enumerate(sorted(sd.method, key=lambda x: x.name)):
        method_name = md.name
        method_index_const_name = get_method_index_const_name(service_name, method_name)
        const_decl += "    {} = {}\n".format(method_index_const_name, method_index)

    const_decl += ")\n"
    return const_decl


def make_service_client_decl(package_path, sd):
    service_name = sd.name
    service_client_name = service_name + "Client"

    service_client_decl = """\

type {service_client_name} struct {{
    methodCaller pbrpc.MethodCaller
    resourceID string
    extraData map[string][]byte
    autoRetry bool
}}

func Make{service_client_name}(methodCaller pbrpc.MethodCaller) {service_client_name} {{
    return {service_client_name}{{
        methodCaller: methodCaller,
        resourceID: "",
        extraData: nil,
        autoRetry: false,
    }}
}}

func (self {service_client_name}) WithResourceID(resourceID string) {service_client_name} {{
    return {service_client_name}{{
        methodCaller: self.methodCaller,
        resourceID: resourceID,
        extraData: self.extraData,
        autoRetry: self.autoRetry,
    }}
}}

func (self {service_client_name}) WithExtraData(extraData map[string][]byte) {service_client_name} {{
    return {service_client_name}{{
        methodCaller: self.methodCaller,
        resourceID: self.resourceID,
        extraData: extraData,
        autoRetry: self.autoRetry,
    }}
}}

func (self {service_client_name}) WithAutoRetry(autoRetry bool) {service_client_name} {{
    return {service_client_name}{{
        methodCaller: self.methodCaller,
        resourceID: self.resourceID,
        extraData: self.extraData,
        autoRetry: autoRetry,
    }}
}}
""".format(
        service_client_name=service_client_name,
    )

    service_name_const_name = get_service_name_const_name(service_name)
    method_table_name = get_method_table_name(service_name)

    for md in sd.method:
        method_name = md.name
        method_index_const_name = get_method_index_const_name(service_name, method_name)
        request_type = get_struct_path(package_path, md.input_type)
        response_type = get_struct_path(package_path, md.output_type)

        if md.input_type == VOID_PATH:
            part11 = ""
            part12 = "&{}{{}}".format(request_type)
        else:
            part11 = ", request *{}".format(request_type)
            part12 = "request"

        if md.output_type in (VOID_PATH, NO_RETURN_PATH):
            part21 = "error"

            if md.output_type == VOID_PATH:
                part22 = ""
                part23 = "_, "
            else:
                part22 = "WithoutReturn"
                part23 = ""

            part24 = ""
            part25 = ""
        else:
            part21 = "(*{}, error)".format(response_type)
            part22 = ""
            part23 = "response, "
            part24 = "nil, "
            part25 = "response.(*{}), ".format(response_type)

        service_client_decl += """\

func (self {service_client_name}) {method_name}(context_ context.Context{part11}) {part21} {{
    _ = pbrpc.IncomingMessage(&{response_type}{{}})
    methodRecord := &{method_table_name}[{method_index_const_name}]
    {part23}e := self.methodCaller.CallMethod{part22}(context_, {service_name_const_name}, methodRecord.Name, methodRecord.Index, self.resourceID, self.extraData, {part12}, methodRecord.ResponseType, self.autoRetry)

    if e != nil {{
        return {part24}e
    }}

    return {part25}e
}}
""".format(
            service_client_name=service_client_name,
            method_name=method_name,
            response_type=response_type,
            method_table_name=method_table_name,
            method_index_const_name=method_index_const_name,
            service_name_const_name=service_name_const_name,
            part11=part11,
            part12=part12,
            part21=part21,
            part22=part22,
            part23=part23,
            part24=part24,
            part25=part25,
        )

    return service_client_decl


def make_service_handler_base_decl(package_path, sd):
    service_name = sd.name
    service_handler_base_name = service_name + "HandlerBase"
    service_name_const_name = get_service_name_const_name(service_name)
    method_table_name = get_method_table_name(service_name)

    service_handler_base_decl = """\

type {service_handler_base_name} struct {{}}

func ({service_handler_base_name}) X_GetName() string {{ return {service_name_const_name} }}
func ({service_handler_base_name}) X_GetMethodTable() pbrpc.MethodTable {{ return {method_table_name} }}
""".format(
        service_handler_base_name=service_handler_base_name,
        service_name_const_name=service_name_const_name,
        method_table_name=method_table_name,
    )

    service_handler_name = service_name + "Handler"

    service_handler_base_decl += """\

// `{service_handler_name}` template:
//
// type {service_handler_name} struct {{
//     {service_handler_base_name}
// }}
//
""".format(
        service_handler_name=service_handler_name,
        service_handler_base_name=service_handler_base_name,
    )

    for md in sd.method:
        method_name = md.name
        request_type = get_struct_path(package_path, md.input_type)
        response_type = get_struct_path(package_path, md.output_type)

        if md.input_type == VOID_PATH:
            part1 = ""
        else:
            part1 = ", request *{}".format(request_type)

        if md.output_type in (VOID_PATH, NO_RETURN_PATH):
            part2 = "error"
        else:
            part2 = "(*{}, error)".format(response_type)

        service_handler_base_decl += "// func ({}) {}(context_ context.Context{}) {}\n".format(service_handler_name, method_name, part1, part2)

    return service_handler_base_decl


def make_method_table_decl(package_path, sd):
    service_name = sd.name
    method_table_decl = "\nvar {} = pbrpc.MethodTable{{\n".format(get_method_table_name(service_name))

    for md in sd.method:
        method_name = md.name
        method_index_const_name = get_method_index_const_name(service_name, method_name)
        request_type = get_struct_path(package_path, md.input_type)
        response_type = get_struct_path(package_path, md.output_type)

        if md.input_type == VOID_PATH:
            part11 = "_"
            part12 = ""
            part13 = ""
        else:
            part11 = "request"
            part12 = ", *{}".format(request_type)
            part13 = ", request.(*{})".format(request_type)

        if md.output_type in (VOID_PATH, NO_RETURN_PATH):
            part21 = "error"
            part22 = "&{}{{}}, ".format(response_type)
        else:
            part21 = "(*{}, error)".format(response_type)
            part22 = ""

        method_table_decl += """\
    {method_index_const_name}: {{
        Index: {method_index_const_name},
        Name: "{method_name}",
        RequestType: reflect.TypeOf({request_type}{{}}),
        ResponseType: reflect.TypeOf({response_type}{{}}),

        Handler: func(serviceHandler pbrpc.ServiceHandler, context_ context.Context, {part11} interface{{}}) (pbrpc.OutgoingMessage, error) {{
            methodHandler, ok := serviceHandler.(interface {{ {method_name}(context.Context{part12}) {part21} }})

            if !ok {{
                return nil, pbrpc.X_MakeError(pbrpc.ErrorNotImplemented, "", nil)
            }}

            return {part22}methodHandler.{method_name}(context_{part13})
        }},
    }},
""".format(
            method_index_const_name=method_index_const_name,
            method_name=method_name,
            request_type=request_type,
            response_type=response_type,
            part11=part11,
            part12=part12,
            part13=part13,
            part21=part21,
            part22=part22,
        )

    method_table_decl += "}\n"
    return method_table_decl


def format_code(code):
    try:
        process = subprocess.Popen("gofmt", stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        output, _ = process.communicate(code)

        if process.poll() == os.EX_OK:
            code = output
    except:
        pass

    return code


def generate_stub(fd):
    if len(fd.service) == 0:
        return

    file_path = fd.name
    package_path = get_package_path_by_file_path(file_path)
    package_name = get_package_name(package_path)

    file_content = """\
/*
 * Code generated by protoc-gen-pbrpc. DO NOT EDIT.
 * source: {file_path}
 */

package {package_name}
""".format(
        file_path=file_path,
        package_name=package_name,
    )

    file_content += make_import_decl(package_path)

    for sd in fd.service:
        service_name = sd.name
        file_content += "\n// {} {}\n".format(service_name, (80 - 4 - len(service_name)) * "/")
        file_content += make_const_decl(package_path, sd)
        file_content += make_service_client_decl(package_path, sd)
        file_content += make_service_handler_base_decl(package_path, sd)
        file_content += make_method_table_decl(package_path, sd)

    file_ = response.file.add()
    file_.name = "{}/{}.pbrpc.go".format(package_path, remove_postfix(os.path.basename(file_path), ".proto"))
    file_.content = format_code(file_content)


def get_package_name(package_path):
    try:
        i = package_path.rindex("/")
    except ValueError:
        i = -1

    return package_path[i+1:].replace("-", "_").replace(".", "_")


def get_method_index_const_name(service_name, method_name):
    return service_name + "_" + method_name


def get_service_name_const_name(service_name):
    return service_name + "Name"


def get_method_table_name(service_name):
    return "methodTableOf" + service_name


def remove_postfix(string, postfix):
    if string.endswith(postfix):
        string = string[:-len(postfix)]

    return string


def main():
    stdin = sys.stdin
    stdout = sys.stdout

    if sys.version_info[0] == 3:
        stdin = stdin.buffer
        stdout = stdout.buffer

    request = plugin_pb2.CodeGeneratorRequest.FromString(stdin.read())
    response = generate_stubs(request)
    stdout.write(response.SerializeToString())


main()
